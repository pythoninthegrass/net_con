version: "3.0"

vars:
  COMPOSE_FILE: '{{.COMPOSE_FILE | default (printf "%s/docker-compose.yml" .ROOT_DIR)}}'
  COMPOSE_REMOVE_ORPHANS: '{{.COMPOSE_REMOVE_ORPHANS | default "true"}}'
  DOCKERFILE: '{{.DOCKERFILE | default (printf "%s/Dockerfile" .ROOT_DIR)}}'
  ARCH: '{{.ARCH | default "linux/amd64"}}'
  REGISTRY: '{{.REGISTRY | default "ghcr.io"}}'
  USER_NAME: '{{.USER_NAME | default "pythoninthegrass"}}'
  SERVICE: '{{.SERVICE | default "net-con"}}'
  VERSION: '{{.VERSION | default "latest"}}'
  FULL_IMAGE: "{{.REGISTRY}}/{{.USER_NAME}}/{{.SERVICE}}:{{.VERSION}}"

tasks:
  net:
    desc: "Create docker network"
    cmds:
      - |
        docker network create \
          --driver bridge \
          app-tier
    status:
      - |
        docker network ls --format \{\{.Name\}\} \
          | grep -q '^app-tier$'

  vol:
    desc: "Create docker volume"
    cmds:
      - |
        docker volume create \
          --driver local \
          {{.SERVICE}}-vol
    status:
      - |
        docker volume ls --format \{\{.Name\}\} \
          | grep -q '^{{.SERVICE}}-vol$'

  login:
    desc: "Login to the container registry"
    cmds:
      - |
        echo "{{.REGISTRY_PASS}}" | docker login \
          -u {{.USER_NAME}} \
          --password-stdin {{.REGISTRY_URL}}
    run: once
    silent: true
    status:
      - |
        jq -e '.auths | keys[] | select(contains("{{.REGISTRY_URL}}"))' ~/.docker/config.json

  up:
    desc: "Start the project with docker compose"
    cmds:
      - |
        docker compose -f {{.COMPOSE_FILE}} up -d \
        --build \
        --remove-orphans

  run:
    desc: "Run the docker image locally (use -- <docker args>)"
    deps: [build]
    vars:
      DOCKER_ARGS: '{{.CLI_ARGS | default "--rm"}}'
    cmds:
      - docker run {{.DOCKER_ARGS}} {{.SERVICE}}:{{.VERSION}}

  exec:
    desc: "Shell into a running container (use -- <command> for custom command)"
    vars:
      CMD: '{{.CLI_ARGS | default "sh"}}'
    cmds:
      - docker exec -it {{.SERVICE}} {{.CMD}}

  logs:
    desc: "Follow the logs of a running container"
    cmds:
      - docker compose logs -tf {{.SERVICE}}

  stop:
    desc: "Stop the project with docker compose"
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} stop

  down:
    desc: "Stop and remove containers, networks, and volumes with docker compose"
    cmds:
      - |
        docker compose -f {{.COMPOSE_FILE}} down \
        --volumes

  prune:
    desc: "Prune docker"
    cmds:
      - docker system prune --all --force
      - docker builder prune --all --force

  create-builder:
    desc: "Create a local docker buildx builder"
    cmds:
      - |
        docker buildx create \
          --name multi-platform \
          --node multi-platform \
          --platform linux/arm64/v8,linux/amd64 \
          --driver=docker-container \
          --use \
          --bootstrap
    status:
      - docker buildx inspect multi-platform > /dev/null 2>&1

  validate:
    desc: Validate the docker-bake.hcl file
    vars:
      BAKE_OUTPUT:
        sh: docker buildx bake --file docker-bake.hcl --print 2>&1 || true
      VALIDATION_ERROR:
        sh: echo "{{.BAKE_OUTPUT}}" | grep -q "ERROR:" && echo "true" || echo "false"
    preconditions:
      - sh: "test {{.VALIDATION_ERROR}} = false"
        msg: |
          Docker bake file is invalid. Error details:
          {{.BAKE_OUTPUT}}
    cmds:
      - cmd: echo "Docker bake file is valid"
        silent: true

  build:
    desc: "Build the docker image"
    summary: |
      Build the docker image with the specified dockerfile.

      The default dockerfile is `Dockerfile`.

      USAGE
        task docker:build
    cmds:
      - |
        docker build \
          -f {{.DOCKERFILE}} \
          -t {{.SERVICE}} \
          --platform {{.ARCH}} \
          .

  buildx:
    desc: "Build using docker buildx bake"
    summary: |
      Build using docker buildx bake with the specified target.

      AVAILABLE TARGETS
        - build (default): Builds the main image
        - amd64: Builds specifically for AMD64 platform
        - arm64: Builds specifically for ARM64 platform
        - multi-platform: Builds for both AMD64 and ARM64 platforms

      USAGE
        task docker:buildx
        task docker:buildx -- amd64
        task docker:buildx -- arm64
        task docker:buildx -- multi-platform
    deps:
      - validate
      - create-builder
    vars:
      TARGET: '{{.CLI_ARGS | default "build"}}'
    preconditions:
      - sh: |
          case "{{.TARGET}}" in
            build|amd64|arm64|multi-platform) exit 0 ;;
            *) exit 1 ;;
          esac
        msg: |
          Invalid target: {{.TARGET}}
          Valid targets are: build, amd64, arm64, multi-platform
    cmds:
      - |
        docker buildx bake \
          --file docker-bake.hcl \
          {{.TARGET}} \
          --load

  tag:
    desc: "Tag the docker image for a different registry"
    summary: |
      Tag the docker image for a different registry.

      The default alternative registry is Control Plane (registry.cpln.io).

      USAGE
        task docker:tag -- <full-image>

      EXAMPLE
        task docker:tag -- cpln
        task docker:tag -- ghcr.io/pythoninthegrass/net-con:latest
    cmds:
      - |
        case "{{.CLI_ARGS}}" in
          "cpln")
            docker tag {{.FULL_IMAGE}} {{.USER_NAME}}.registry.cpln.io/{{.SERVICE}}:{{.VERSION}}
            ;;
          *)
            docker tag {{.FULL_IMAGE}} {{.CLI_ARGS}}
            ;;
        esac

  push:
    desc: "Push the docker image to the registry"
    summary: |
      Push the docker image to the specified registry.

      The default registry is GitHub Container Registry (ghcr.io).

      USAGE
        task docker:push -- <registry>

      EXAMPLE
        task docker:push  # ghcr.io
        task docker:push -- cpln
        task docker:push -- ghcr.io/pythoninthegrass/net-con:latest
    deps:
      - login
    cmds:
      - |
        case "{{.CLI_ARGS}}" in
          "cpln")
            docker push {{.USER_NAME}}.registry.cpln.io/{{.SERVICE}}:{{.VERSION}}
            ;;
          "")
            docker push {{.FULL_IMAGE}}
            ;;
          *)
            docker push {{.CLI_ARGS}}
            ;;
        esac
